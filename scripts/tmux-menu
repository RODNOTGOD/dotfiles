#!/usr/bin/env sh
__ScriptVersion="0.2"
check_tmuxinator=$(command -v tmuxinator)

function menu () {
	local session_names=()
	local name

	echo -e " Available session"
	echo -e " -----------------\n"

	IFS=$'\n'
	for session in $(tmux list-session 2>/dev/null) ; do
		session_names+=("$(echo $session | cut -d ':' -f1)")
	done

	local len=$((${#session_names[@]}))
	for i in $(seq 0 $len); do
		name="New session"
		if [[ $i < ${#session_names[@]} ]]; then
			name=${session_names[$i]}
		fi
		echo " $((i+1)))  $name"
	done
	if [ $check_tmuxinator ]; then
		echo " $((len+2)))  Tmuxinator"
	fi
	printf " Please choose your session: "
	read choice
	choice=${choice:-$((len+1))}

	if [[ $choice -le $len ]]; then
		tmux attach-session -t ${session_names[$((choice-1))]} 1>&2
		clear
	elif [ $choice -eq $(($len+2)) ] && [ $check_tmuxinator ]; then
		echo ""
		list_tmuxinator
	else
		new_session
	fi
}

function new_session () {
	printf " Enter a new name: "
	read new_name
	. $HOME/.default-tmux.sh $new_name
	clear
}

function create_tmuxinator() {
	tmuxinator_dir=~/.tmuxinator/
	tmux new-session -s $name

	pane_target=1
	windows=$(tmux list-windows | grep -oe '^[0-9]\+:.*[\*|-|(]' | cut -d '(' -f1)
	layouts=$(tmux list-windows | grep -oe '\[layout.*\]' | cut -d ' ' -f2)
	pane_layout=()
	win_layout=()
	len=()

	OLDIFS=$IFS
	IFS=$'\n'
	for layout in $layouts; do
		pane_layout+=(${layout:0:-1})
	done
	for window in $windows; do
		window=$(echo ${window:3:-1} | sed -e 's/[\*|-]//')
		num_panes=$(tmux list-panes -t$pane_target)
		((pane_target++))
		counter=0
		for item in $num_panes; do
			((counter++))
		done
		len+=($counter)
		win_layout+=($window)
	done
	IFS=$OLDIFS

printf "
name: $name
root: $HOME
windows:
$(for (( i = 0; i < ${#win_layout[@]}; i++ )); do
	printf "  - ${win_layout[$i]}:\n"
	printf "      layout: ${pane_layout[$i]}\n"
	printf "      panes:\n"
	for (( x = 0; x < ${len[$i]}; x++ )); do
		printf "        - \n"
	done
done)
" > $tmuxinator_dir$name.yml
clear
echo "Wrote to file: $tmuxinator_dir$name.yml"
}

function list_tmuxinator () {
	tmuxinator_tp=($(tmuxinator list | cut -d ':' -f2))
	local templates=()
	local len=1
	IFS=$' '
	echo -e " Tmuxinator session"
	echo -e " ------------------\n"
	for arg in ${tmuxinator_tp[@]}; do
		echo " $len)  $arg"
		templates+=("$arg")
		len=$((len+1))
	done
	echo " $len)  New template"
	echo " $((len+1)))  Main menu"
	printf " Please choose your session: "
	read choice
	choice=${choice:-((len+1))}

	if [[ $choice -lt $len ]]; then
		tmuxinator start ${templates[$((choice-1))]}
		clear
	elif [[ $choice -eq $len ]]; then
		name=""
		while [[ -z ${name} ]]; do
			printf " Enter a new name: "
			read name
			case ${name} in
				*\ *) name=""; echo " Must be one word";;
			esac
		done
		create_tmuxinator $name
	else
		echo ""
		menu
	fi

}

function usage () {
cat << EOF
Usage :  $0 [options] [--]

	Options:
	-n            Create new session
	-t            List only tmuxinator sessions
	-c            Create new tmuxinator template. Requires name
	-h|help       Display this message
	-v|version    Display script version
EOF
}

while getopts ":c:hvtn" opt; do
	case $opt in
		h|help)
			usage
			exit 0
			;;
		v|version)
			echo "$0 -- Version $__ScriptVersion";
			exit 0
			;;
		t)
			list_tmuxinator
			exit 0
			;;
		c)
			if [[ $check_tmuxinator ]]; then
				name=${OPTARG}
				create_tmuxinator
				exit 0
			else
				echo "You must have tmuxinator installed"
				exit 1
			fi
			;;
		n)
			new_session
			exit 0
			;;
		*)
			echo -e "\n  Option does not exist : $OPTARG\n"
			usage
			exit 1
			;;
	esac
done
shift $(($OPTIND-1))

menu
