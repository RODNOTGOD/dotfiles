#!/usr/bin/env bash
__ScriptVersion="1.1"
check_tmuxinator=$(command -v tmuxinator)

is_attached() {
	local flag=$(tmux ls -F "#{session_name}: #{?session_attached,attached,nil}" 2>/dev/null| \
		grep "$(tmux display-message -p "#S" 2>/dev/null): attached")
	if [[ (-z $flag || -z $TMUX) ]]; then
		echo False
	else
		echo True
	fi
}


function new_session () {
	printf "Enter a new name: "
	read new_name
	local new_name=${new_name:-default}
	if [[ $(tmux list-sessions -F "#S") == *"$new_name"* ]]; then
		tmux attach-session -t $new_name
	else
		. $HOME/.tmux/default-tmux.sh $new_name
	fi
	clear
}


function create_tmuxinator() {
	tmuxinator_dir=~/.tmuxinator/
	name=""
	while [[ -z ${name} ]]; do
		printf " Enter a new name: "
		read name
		case ${name} in
			*\ *) name=""; echo " Must be one word";;
		esac
	done
	tmux new-session -s $name
	name=$(tmux display-message -p "#S")
	clear

	pane_target=1
	windows=$(tmux list-windows | grep -oe '^[0-9]\+:.*[\*|-|(]' | cut -d '(' -f1)
	layouts=$(tmux list-windows | grep -oe '\[layout.*\]' | cut -d ' ' -f2)
	pane_layout=()
	win_layout=()
	pane_cmds=()
	len=()

	printf "Enter root directory: "
	read root
	root=${root:-$HOME}

	OLDIFS=$IFS
	IFS=$'\n'
	for layout in $layouts; do
		pane_layout+=(${layout:0:-1})
	done
	for window in $windows; do
		window=$(echo ${window:3:-1} | sed -e 's/[\*|-]//')
		echo -e "\nWindow - $window"
		num_panes=$(tmux list-panes -t$pane_target)
		((pane_target++))
		counter=0
		for item in $num_panes; do
			((counter++))
			printf "Enter a command for pane $counter: "
			read pane_cmd
			pane_cmd=${pane_cmd:-"clear"}
			pane_cmds+=($pane_cmd)
		done
		len+=($counter)
		win_layout+=($window)
	done
	IFS=$OLDIFS

counter=0
printf "# ~/.tmuxinator/$name.yml\n
name: $name
root: $root
windows:
$(for (( i = 0; i < ${#win_layout[@]}; i++ )); do
	printf "  - ${win_layout[$i]}:\n"
	printf "      layout: ${pane_layout[$i]}\n"
	printf "      panes:\n"
	for (( x = 0; x < ${len[$i]}; x++ )); do
		printf "        - ${pane_cmds[$counter]}\n"
		((counter++))
	done
done)
" > $tmuxinator_dir$name.yml
clear
echo "Wrote to file: $tmuxinator_dir$name.yml"
}


function list_tmuxinator() {
	templates=($(tmuxinator list | cut -d ':' -f2) "New Template" "Main Menu")
	PS3="Please choose your session: "
	echo -e " Tmuxinator sessions"
	echo -e " -------------------\n"
	select template in "${templates[@]}"; do
		case "$template" in
			"New Template")
				create_tmuxinator
				break
				;;
			"Main Menu")
				echo -e '\n'
				menu
				break
				;;
			*)
				tmuxinator start $template
				clear
				break
				;;
		esac
	done
}


function menu () {
	local session_names=($(tmux list-sessions -F "#S" 2>/dev/null) "New Session" )
	if [ $check_tmuxinator ]; then
		session_names+=("Tmuxinator")
	fi

	PS3="Please choose your session: "
	echo -e " Available session"
	echo -e " -----------------\n"
	select session in "${session_names[@]}"; do
		case $session in
			"New Session")
				new_session
				break
				;;
			"Tmuxinator")
				echo -e '\n'
				list_tmuxinator
				break
				;;
			*)
				tmux attach-session -t $session
				clear
				break
				;;
		esac
	done
}


function usage () {
cat << EOF
Usage :  $0 [options] [--]

	Options:
	-n            Create new session
	-t            List only tmuxinator sessions
	-c            Create new tmuxinator template. Requires name
	-h|help       Display this message
	-v|version    Display script version
EOF
}


while getopts "c:hvtn" opt; do
	case $opt in
		h|help)
			usage
			exit 0
			;;
		v|version)
			echo "$0 -- Version $__ScriptVersion";
			exit 0
			;;
		t)
			list_tmuxinator
			exit 0
			;;
		c)
			if [[ $check_tmuxinator ]]; then
				name=${OPTARG}
				create_tmuxinator
				exit 0
			else
				echo "You must have tmuxinator installed"
				exit 1
			fi
			;;
		n)
			new_session
			exit 0
			;;
		*)
			echo -e "\n  Option does not exist : $OPTARG\n"
			usage
			exit 1
			;;
	esac
done
shift $(($OPTIND-1))

flag=$(is_attached)
if [[ $flag != True ]]; then
	menu
else
	echo currently attached to session
	echo sessions should be nested with care, unset \$TMUX to force
fi
